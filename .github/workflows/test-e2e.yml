name: üöÄ

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Test Full Hook Functionality
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # os: [ubuntu-latest, macos-15]
        os: [ubuntu-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          sudo apt update
          sudo apt install -y git snapd
          sudo snap install yq
        fi

    - name: Install Claude CLI
      run: |
        npm install -g @anthropic-ai/claude-code
        claude --version

    - name: Configure Claude CLI
      run: |
          echo "ANTHROPIC_API_KEY=${{ secrets.CLAUDE_API_KEY }}" >> $GITHUB_ENV

    - name: Install git hooks
      run: |
        chmod +x ./install.sh
        ./install.sh -y

    - name: Test commit message generation scenarios
      run: |
        set -e  # Exit on any error

        # Initialize step summary
        echo "# ü§ñ Generated Commit Messages" >> $GITHUB_STEP_SUMMARY
        echo "Below are examples of commit messages generated by the Claude Git Hook during testing:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Create test repositories for different scenarios

        # Scenario 1: Simple feature addition
        echo "=== Testing Scenario 1: Simple feature addition ==="
        mkdir -p /tmp/test-feature
        cd /tmp/test-feature
        git init
        git config user.name "Test User"
        git config user.email "test@example.com"

        echo "# My App" > README.md
        echo "A simple application" >> README.md
        git add README.md
        git commit -m "Initial commit"

        # Add a new feature
        mkdir -p src
        cat > src/auth.js << 'EOF'
        export function authenticate(user, password) {
          if (!user || !password) {
            throw new Error('Username and password are required');
          }

          // Simple authentication logic
          return user === 'admin' && password === 'secret';
        }

        export function logout() {
          // Clear session
          localStorage.removeItem('user');
        }
        EOF

        git add src/auth.js

        # Test the hook
        echo "Testing hook with authentication feature..."
        echo "" > .git/COMMIT_EDITMSG
        if ! $HOME/.git-hooks/prepare-commit-msg .git/COMMIT_EDITMSG; then
          echo "‚ùå Hook failed for auth feature"
          exit 1
        fi

        if [ -s .git/COMMIT_EDITMSG ]; then
          echo "‚úì Hook generated commit message:"
          cat .git/COMMIT_EDITMSG
          echo "## üîß Feature Addition Commit Message" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat .git/COMMIT_EDITMSG >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Hook did not generate commit message"
          exit 1
        fi

        # Scenario 2: Bug fix
        echo ""
        echo "=== Testing Scenario 2: Bug fix ==="
        mkdir -p /tmp/test-bugfix
        cd /tmp/test-bugfix
        git init
        git config user.name "Test User"
        git config user.email "test@example.com"

        # Create initial file with bug
        cat > calculator.py << 'EOF'
        def divide(a, b):
            return a / b  # Bug: no zero division check

        def multiply(a, b):
            return a * b
        EOF

        git add calculator.py
        git commit -m "Add calculator functions"

        # Fix the bug
        cat > calculator.py << 'EOF'
        def divide(a, b):
            if b == 0:
                raise ValueError("Cannot divide by zero")
            return a / b

        def multiply(a, b):
            return a * b
        EOF

        git add calculator.py

        # Test the hook
        echo "Testing hook with bug fix..."
        echo "" > .git/COMMIT_EDITMSG
        if ! $HOME/.git-hooks/prepare-commit-msg .git/COMMIT_EDITMSG; then
          echo "‚ùå Hook failed for bug fix"
          exit 1
        fi

        if [ -s .git/COMMIT_EDITMSG ]; then
          echo "‚úì Hook generated commit message:"
          cat .git/COMMIT_EDITMSG
          echo "## üêõ Bug Fix Commit Message" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat .git/COMMIT_EDITMSG >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Hook did not generate commit message"
          exit 1
        fi

        # Scenario 3: Refactoring
        echo ""
        echo "=== Testing Scenario 3: Refactoring ==="
        mkdir -p /tmp/test-refactor
        cd /tmp/test-refactor
        git init
        git config user.name "Test User"
        git config user.email "test@example.com"

        # Create initial messy code
        cat > utils.js << 'EOF'
        function doStuff(data) {
          var result = [];
          for (var i = 0; i < data.length; i++) {
            if (data[i].active) {
              result.push(data[i].name.toUpperCase());
            }
          }
          return result;
        }
        EOF

        git add utils.js
        git commit -m "Add utility function"

        # Refactor to modern code
        cat > utils.js << 'EOF'
        /**
         * Extracts active item names and converts them to uppercase
         * @param {Array} data - Array of items with 'active' and 'name' properties
         * @returns {Array} Array of uppercase names for active items
         */
        export const getActiveNames = (data) => {
          return data
            .filter(item => item.active)
            .map(item => item.name.toUpperCase());
        };
        EOF

        git add utils.js

        # Test the hook
        echo "Testing hook with refactoring..."
        echo "" > .git/COMMIT_EDITMSG
        if ! $HOME/.git-hooks/prepare-commit-msg .git/COMMIT_EDITMSG; then
          echo "‚ùå Hook failed for refactoring"
          exit 1
        fi

        if [ -s .git/COMMIT_EDITMSG ]; then
          echo "‚úì Hook generated commit message:"
          cat .git/COMMIT_EDITMSG
          echo "## ‚ôªÔ∏è Refactoring Commit Message" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat .git/COMMIT_EDITMSG >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Hook did not generate commit message"
          exit 1
        fi

    - name: Test configuration scenarios
      run: |
        set -e  # Exit on any error

        echo "=== Testing Configuration Scenarios ==="

        # Test disabling the hook
        claude-git-hooks disable

        # Debug: Check config file contents after disable
        echo "Config file contents after disable:"
        cat ~/.claude-commit-global-config.yaml | grep enabled || echo "enabled key not found"

        # Create a test repo
        mkdir -p /tmp/test-disabled
        cd /tmp/test-disabled
        git init
        git config user.name "Test User"
        git config user.email "test@example.com"

        echo "test" > file.txt
        git add file.txt

        # Test that hook is disabled
        echo "Original message" > .git/COMMIT_EDITMSG
        $HOME/.git-hooks/prepare-commit-msg .git/COMMIT_EDITMSG

        content=$(cat .git/COMMIT_EDITMSG)
        if [ "$content" = "Original message" ]; then
          echo "‚úì Hook correctly disabled"
        else
          echo "‚ùå Hook ran while disabled"
          echo "Config check: enabled=$(cat ~/.claude-commit-global-config.yaml | yq eval '.enabled')"
          exit 1
        fi

        # Re-enable the hook
        claude-git-hooks enable
        echo "‚úì Hook re-enabled"

    - name: Test repository exclusion
      run: |
        set -e  # Exit on any error

        echo "=== Testing Repository Exclusion ==="

        # Create a test repo to exclude
        mkdir -p /tmp/test-excluded
        cd /tmp/test-excluded
        git init
        git config user.name "Test User"
        git config user.email "test@example.com"

        # Get the repository name (should be 'test-excluded')
        repo_name=$(basename $(pwd))

        # Exclude this repository
        claude-git-hooks exclude "$repo_name"

        echo "test" > file.txt
        git add file.txt

        # Test that hook skips this repo
        echo "Original message" > .git/COMMIT_EDITMSG
        $HOME/.git-hooks/prepare-commit-msg .git/COMMIT_EDITMSG

        content=$(cat .git/COMMIT_EDITMSG)
        if [ "$content" = "Original message" ]; then
          echo "‚úì Hook correctly skipped excluded repository"
        else
          echo "‚ùå Hook processed excluded repository"
          exit 1
        fi

        # Include it back
        claude-git-hooks include "$repo_name"
        echo "‚úì Repository exclusion tested"

    - name: Test skip patterns
      run: |
        set -e  # Exit on any error

        echo "=== Testing Skip Patterns ==="

        mkdir -p /tmp/test-skip
        cd /tmp/test-skip
        git init
        git config user.name "Test User"
        git config user.email "test@example.com"

        echo "test" > file.txt
        git add file.txt

        # Test WIP pattern
        echo "WIP: work in progress" > .git/COMMIT_EDITMSG
        original_content=$(cat .git/COMMIT_EDITMSG)
        $HOME/.git-hooks/prepare-commit-msg .git/COMMIT_EDITMSG
        new_content=$(cat .git/COMMIT_EDITMSG)

        if [ "$original_content" = "$new_content" ]; then
          echo "‚úì WIP pattern correctly skipped"
        else
          echo "‚ùå WIP pattern was not skipped"
          exit 1
        fi

        # Test TEMP pattern
        echo "TEMP: temporary commit" > .git/COMMIT_EDITMSG
        original_content=$(cat .git/COMMIT_EDITMSG)
        $HOME/.git-hooks/prepare-commit-msg .git/COMMIT_EDITMSG
        new_content=$(cat .git/COMMIT_EDITMSG)

        if [ "$original_content" = "$new_content" ]; then
          echo "‚úì TEMP pattern correctly skipped"
        else
          echo "‚ùå TEMP pattern was not skipped"
          exit 1
        fi

    - name: Test management script commands
      run: |
        set -e  # Exit on any error

        echo "=== Testing Management Script Commands ==="

        # Test status command
        claude-git-hooks status

        # Test config command (just verify it doesn't crash)
        echo "‚úì Status command works"

        # Test in a repository
        mkdir -p /tmp/test-mgmt
        cd /tmp/test-mgmt
        git init
        git config user.name "Test User"
        git config user.email "test@example.com"

        # Test the test command
        claude-git-hooks test

        echo "‚úì Management script commands tested"

    - name: Summary
      run: |
        echo ""
        echo "=== Full Functionality Test Summary ==="
        echo "‚úì Commit message generation scenarios tested"
        echo "‚úì Configuration management tested"
        echo "‚úì Repository exclusion tested"
        echo "‚úì Skip patterns tested"
        echo "‚úì Management script commands tested"
        echo "‚úì All functionality verified"
        echo "==========================================="