#!/bin/bash

# Global AI Git Hooks Prepare Commit Message Hook
# This hook generates formatted commit messages using AI CLI tools for all repositories

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2

# Global configuration
GLOBAL_CONFIG="$HOME/.ai-commit-global-config.yaml"
LOCAL_CONFIG=".ai-commit-config.yaml"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Helper functions
log_info() {
    echo -e "${BLUE}[AI Hook]${NC} $1"
}

# Get WHY context from environment variable or prompt interactively
get_why_context() {
    local config=$1

    # Check if WHY functionality is enabled
    if [ "$(get_config_value "$config" "use_why_variable" "true")" = "false" ]; then
        echo ""
        return 0
    fi

    local why_content=""

    # Check if WHY is already set
    if [ -n "$WHY" ]; then
        why_content="$WHY"
    elif [ "$(get_config_value "$config" "prompt_for_why" "true")" = "true" ]; then
        # Prompt for WHY interactively only in interactive environments
        # Skip interactive prompts in CI/CD environments
        if [ -c /dev/tty ] && [ -z "$CI" ] && [ -z "$GITHUB_ACTIONS" ] && [ -z "$GITLAB_CI" ] && [ -z "$JENKINS_URL" ] && [ "$TERM" != "dumb" ]; then
            echo -e "" > /dev/tty
            echo -e "\033[1;34;1m----------------------------------------------------\033[0m" > /dev/tty
            echo -e "\033[1;34;1m   AI Commit Messages with Reason. Not Just the What\033[0m" > /dev/tty
            echo -e "\033[3;90m  https://github.com/itlook/ai-commit-msg-writer/\033[0m" > /dev/tty
            echo -e "\033[3;90m-----------------------------------------------------\033[0m" > /dev/tty
            echo -e "" > /dev/tty
            echo -e "\033[1mReason For This Change:\033[0m" > /dev/tty
            read -r why_content < /dev/tty
        fi
    fi

    # Return formatted WHY context or empty string
    if [ -n "$why_content" ]; then
        format_why_context "$why_content"
    else
        echo ""
    fi
}

# Format WHY content for prompt injection
format_why_context() {
    local why_content="$1"

    # Sanitize and limit length (max 200 characters)
    why_content=$(echo "$why_content" | sed 's/["\`]//g' | cut -c1-200)

    if [ -n "$why_content" ]; then
        echo "IMPORTANT CONTEXT: The developer provided this reason for the changes:
\"$why_content\"

Use this context to understand the primary motivation and ensure your commit message reflects this purpose.
"
    else
        echo ""
    fi
}

log_success() {
    echo -e "${GREEN}[AI Hook]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[AI Hook]${NC} $1"
}

log_error() {
    echo -e "${RED}[AI Hook]${NC} $1"
}

# Load configuration (local overrides global)
load_config() {
    local temp_config
    temp_config=$(mktemp)

    # Start with empty config
    echo "{}" > "$temp_config"

    # Check if global config exists and is readable
    if [ ! -f "$GLOBAL_CONFIG" ]; then
        log_error "Global configuration file not found at $GLOBAL_CONFIG"
        log_error "Please run the installation script or copy ai-commit-global-config.yaml to $GLOBAL_CONFIG"
        rm "$temp_config"
        exit 1
    fi

    if [ ! -r "$GLOBAL_CONFIG" ]; then
        log_error "Cannot read global configuration file: $GLOBAL_CONFIG"
        log_error "Please check file permissions"
        rm "$temp_config"
        exit 1
    fi

    # Load global config first
    if ! cat "$GLOBAL_CONFIG" | yq eval -o=json > "$temp_config" 2>/dev/null; then
        log_error "Failed to parse global configuration file: $GLOBAL_CONFIG"
        log_error "Please check YAML syntax and ensure yq is installed"
        rm "$temp_config"
        exit 1
    fi

    # Override with local config if it exists
    if [ -f "$LOCAL_CONFIG" ]; then
        local local_json
        local_json=$(yq eval -o=json "$LOCAL_CONFIG" 2>/dev/null)
        if [ $? -eq 0 ] && [ -n "$local_json" ]; then
            echo "$local_json" | yq eval-all '. as $item ireduce ({}; . * $item)' "$temp_config" - 2>/dev/null > "$temp_config.new" && mv "$temp_config.new" "$temp_config"
        else
            log_warning "Local configuration file exists but failed to parse: $LOCAL_CONFIG"
        fi
    fi

    cat "$temp_config"
    rm "$temp_config"
}

# Validate configuration has required fields
validate_config() {
    local config=$1

    # Check for required prompt_template
    local prompt_template
    prompt_template=$(echo "$config" | yq eval '.prompt_template' - 2>/dev/null)

    if [ -z "$prompt_template" ] || [ "$prompt_template" = "null" ]; then
        log_error "Configuration validation failed: prompt_template is missing or empty"
        log_error "Please check your configuration file: $GLOBAL_CONFIG"
        return 1
    fi

    # Check if template contains required placeholders
    if ! echo "$prompt_template" | grep -q "{diff}"; then
        log_error "Configuration validation failed: prompt_template missing {diff} placeholder"
        return 1
    fi

    return 0
}

# Get config value
get_config_value() {
    local config=$1
    local key=$2
    local default=$3
    echo "$config" | yq eval ".$key // $default" - 2>/dev/null || echo "$default"
}

# Check if current repository should be excluded
is_repo_excluded() {
    local config=$1
    local repo_name
    repo_name=$(basename "$(git rev-parse --show-toplevel)" 2>/dev/null)

    # Check if excluded_repositories key exists and contains the repo name
    local is_excluded
    is_excluded=$(echo "$config" | yq eval ".excluded_repositories | contains([\"$repo_name\"])" - 2>/dev/null)

    [ "$is_excluded" = "true" ] && echo "true" || echo "false"
}

# Check if pattern matches any in skip patterns
matches_skip_pattern() {
    local text=$1
    local config=$2

    local patterns
    patterns=$(echo "$config" | yq eval '.skip_patterns[]' - 2>/dev/null)

    while IFS= read -r pattern; do
        if [ -n "$pattern" ] && echo "$text" | grep -q "$pattern"; then
            echo "true"
            return
        fi
    done <<< "$patterns"

    echo "false"
}

# Collect project context from README.md and CLAUDE.md
collect_project_context() {
    local context=""

    # Check for README.md
    if [ -f "README.md" ]; then
        local readme_content
        readme_content=$(head -n 100 "README.md" 2>/dev/null | sed 's/^/# /')
        if [ -n "$readme_content" ]; then
            context="${context}PROJECT README:\n${readme_content}\n\n"
        fi
    fi


    echo "$context"
}

# Filter diff to exclude ignored files
filter_diff() {
    local diff=$1
    local config=$2

    local ignore_patterns
    ignore_patterns=$(echo "$config" | yq eval '.file_ignore_patterns[]' - 2>/dev/null)

    # If no ignore patterns, return original diff
    if [ -z "$ignore_patterns" ]; then
        echo "$diff"
        return
    fi

    # Create temp file with patterns
    local temp_patterns
    temp_patterns=$(mktemp)
    echo "$ignore_patterns" > "$temp_patterns"

    # Filter out ignored files
    echo "$diff" | awk -v patterns_file="$temp_patterns" '
    function glob_to_regex(glob,    regex) {
        regex = glob
        gsub(/\./, "\\.", regex)
        gsub(/\*/, ".*", regex)
        gsub(/\?/, ".", regex)
        return "^" regex "$"
    }
    BEGIN {
        while ((getline pattern < patterns_file) > 0) {
            if (pattern != "") {
                ignore_list[++ignore_count] = glob_to_regex(pattern)
            }
        }
        close(patterns_file)
    }
    /^diff --git/ {
        file = $4
        gsub(/^b\//, "", file)
        skip = 0
        for (i = 1; i <= ignore_count; i++) {
            if (match(file, ignore_list[i])) {
                skip = 1
                break
            }
        }
    }
    !skip { print }
    '

    rm "$temp_patterns"
}

# Generate commit message
generate_commit_message() {
    local diff=$1
    local config=$2

    local max_subject_length
    local max_body_length
    max_subject_length=$(get_config_value "$config" "max_subject_length" "50")
    max_body_length=$(get_config_value "$config" "max_body_line_length" "72")

    local temp_prompt
    temp_prompt=$(mktemp)

    # Get repository context
    local repo_name
    repo_name=$(basename "$(git rev-parse --show-toplevel)" 2>/dev/null)

    # Get git author information
    local author_name
    local author_email
    author_name=$(git config user.name || echo "Unknown Author")
    author_email=$(git config user.email || echo "unknown@example.com")

    # Collect project context from README.md and CLAUDE.md
    local project_context
    project_context=$(collect_project_context)

    # Get WHY context
    local why_context
    why_context=$(get_why_context "$config")

    # Get prompt template from config (already validated)
    local prompt_template
    prompt_template=$(echo "$config" | yq eval '.prompt_template' - 2>/dev/null)

    # Replace template variables
    local formatted_prompt
    formatted_prompt="$prompt_template"
    formatted_prompt="${formatted_prompt//\{repo_name\}/$repo_name}"
    formatted_prompt="${formatted_prompt//\{max_subject_length\}/$max_subject_length}"
    formatted_prompt="${formatted_prompt//\{max_body_length\}/$max_body_length}"
    formatted_prompt="${formatted_prompt//\{author_name\}/$author_name}"
    formatted_prompt="${formatted_prompt//\{author_email\}/$author_email}"
    formatted_prompt="${formatted_prompt//\{project_context\}/$project_context}"
    formatted_prompt="${formatted_prompt//\{why_context\}/$why_context}"
    formatted_prompt="${formatted_prompt//\{diff\}/$diff}"

    # Convert \n to actual newlines
    echo -e "$formatted_prompt" > "$temp_prompt"

    if [ "$COMMIT_SOURCE" = "squash" ]; then
        log_info "Generating combined commit message for squashed commits with AI CLI tool..."
    else
        log_info "Generating commit message with AI CLI tool..."
    fi

    local ai_response
    ai_response=$(cat "$temp_prompt" | claude 2>&1)
    local ai_exit_code=$?

    rm "$temp_prompt"

    if [ $ai_exit_code -eq 0 ] && [ -n "$ai_response" ]; then
        # Extract full commit message (try code blocks first, then fallback to entire response)
        local commit_msg
        commit_msg=$(echo "$ai_response" | sed -n '/^```$/,/^```$/p' | sed '1d;$d' | sed 's/^[[:space:]]*$//' | sed '/^$/N;/^\n$/d')

        # If no code blocks found, use the entire response (Claude might respond without code blocks)
        if [ -z "$commit_msg" ]; then
            commit_msg=$(echo "$ai_response" | sed 's/^[[:space:]]*$//' | sed '/^$/N;/^\n$/d')
        fi

        if [ -n "$commit_msg" ]; then
            echo "$commit_msg" > "$COMMIT_MSG_FILE"

            echo ""
            log_success "Generated commit message for $repo_name:"
            echo "========================"
            echo "$commit_msg"
            echo "========================"
            echo ""
            echo "Full analysis:"
            echo "$ai_response" | head -20
            echo ""
            log_info "Edit the message if needed, or proceed with the commit."
            return 0
        else
            log_error "Failed to extract commit message from AI response"
            log_error "AI responded but no code block found in response:"
            echo "$ai_response" | head -10
            return 1
        fi
    else
        if [ $ai_exit_code -ne 0 ]; then
            log_error "AI CLI failed with exit code: $ai_exit_code"
            log_error "Error details: $ai_response"
        elif [ -z "$ai_response" ]; then
            log_error "AI CLI returned empty response"
        fi
        return 1
    fi
}

# Main execution
main() {
    # Skip if NOAI environment variable is set (any value)
    if [ -n "$NOAI" ]; then
        exit 0
    fi

    # Skip when user provides their own message with -m flag
    if [ "$COMMIT_SOURCE" = "message" ]; then
        exit 0
    fi

    # Skip cherry-picked commits (when COMMIT_SOURCE is "commit")
    if [ "$COMMIT_SOURCE" = "commit" ]; then
        log_info "Skipping AI commit message generation for cherry-picked commit"
        exit 0
    fi

    # Run for regular commits, templates, and squash commits
    if [ "$COMMIT_SOURCE" != "" ] && [ "$COMMIT_SOURCE" != "template" ] && [ "$COMMIT_SOURCE" != "squash" ]; then
        exit 0
    fi

    # Skip during git rebase operations to preserve commit messages
    if [ -d "$(git rev-parse --git-dir)/rebase-merge" ] || [ -d "$(git rev-parse --git-dir)/rebase-apply" ]; then
        exit 0
    fi

    # Load configuration
    local config
    config=$(load_config)

    # Validate configuration
    if ! validate_config "$config"; then
        exit 1
    fi

    # Check if hook is globally enabled
    if [ "$(get_config_value "$config" "enabled" "true")" = "false" ]; then
        exit 0
    fi

    # Check if current repository is excluded
    if [ "$(is_repo_excluded "$config")" = "true" ]; then
        log_info "Repository is excluded from AI hooks"
        exit 0
    fi

    # Check if AI CLI is available
    if ! command -v claude &> /dev/null; then
        log_warning "AI CLI not found, skipping"
        exit 0
    fi

    # Check if message generation is enabled
    if [ "$(get_config_value "$config" "message_generation_enabled" "true")" = "false" ]; then
        exit 0
    fi

    # Get diff based on commit source
    local diff
    if [ "$COMMIT_SOURCE" = "squash" ]; then
        # For squash commits, get the combined diff from the base commit
        # This shows all changes that will be included in the squashed commit
        diff=$(git diff HEAD --no-color)
    else
        # For regular commits, get staged diff
        diff=$(git diff --cached --no-color)
    fi

    # If no diff, skip
    if [ -z "$diff" ]; then
        exit 0
    fi

    # Filter diff to exclude ignored files
    diff=$(filter_diff "$diff" "$config")

    # If no relevant changes after filtering, skip
    if [ -z "$diff" ]; then
        exit 0
    fi

    # Check if we should skip based on existing commit message patterns
    if [ -f "$COMMIT_MSG_FILE" ]; then
        local existing_msg
        existing_msg=$(cat "$COMMIT_MSG_FILE")

        if [ "$(matches_skip_pattern "$existing_msg" "$config")" = "true" ]; then
            exit 0
        fi
    fi

    # Generate commit message
    if ! generate_commit_message "$diff" "$config"; then
        log_error "Commit message generation failed - see details above"
        exit 1
    fi
}

# Run main function
main "$@"
