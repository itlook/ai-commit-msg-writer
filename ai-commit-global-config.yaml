enabled: true
review_enabled: true
message_generation_enabled: true
# WHY Environment Variable Support
# Enable WHY variable to provide context about the reason for changes
# Usage: WHY="fix critical memory leak" git commit
use_why_variable: true
# Prompt interactively for WHY when not set (can be disabled by setting WHY="" or use_why_variable: false)
prompt_for_why: true
max_subject_length: 50
max_body_line_length: 72
skip_patterns:
  - "^WIP:"
  - "^TEMP:"
  - "^FIXUP:"
  - "^SQUASH:"
  - "^Merge branch"
  - "^Merge pull request"
file_ignore_patterns:
  - "*.log"
  - "*.tmp"
  - "*.cache"
  - "node_modules/"
  - ".git/"
  - "dist/"
  - "build/"
  - "coverage/"
  - ".next/"
  - ".nuxt/"
  - "vendor/"
  - "target/"
  - "bin/"
  - "obj/"
excluded_repositories:
  - "dotfiles"
  - "temp-repo"
  - "playground"
commit_types:
  - "feat"
  - "fix"
  - "docs"
  - "style"
  - "refactor"
  - "test"
  - "chore"
  - "ci"
  - "build"
  - "perf"
  - "revert"
prompt_template: |
  Generate a commit message for repository "{repo_name}" that PRIORITIZES WHY over WHAT.

  {project_context}REPOSITORY CONTEXT: Use the above information to understand the project's purpose and write contextually appropriate commit messages.

  {why_context}

  CRITICAL PRINCIPLE: The commit message should answer WHY this change was made FIRST, then briefly explain what changed to support that why.

  PRIORITIZATION ORDER:
  1. User-provided WHY context (highest priority - drives title and summary)
  2. Business/functional reason for the change
  3. Impact on users, developers, or system behavior
  4. Technical implementation details (lowest priority)

  FORMATTING GUIDELINES:
  - Subject line format: TYPE: WHY-focused description (under {max_subject_length} chars)
  - Subject should capture the REASON/PURPOSE, not just the technical change
  - Body lines wrapped at {max_body_length} characters
  - Focus on motivation, impact, and reasoning rather than code changes

  COMMIT STRUCTURE:
  ```
  TYPE: Why this change was needed/what problem it solves

  Brief summary explaining the motivation and impact

  * Why this change was made:
  - Primary reason/problem being solved (based on user context)
  - Business/user impact or benefit
  - Consequences of not making this change

  * What changed to achieve this:
  - Key functional/behavioral changes that support the why
  - Technical decisions that directly relate to solving the problem

  * Implementation notes (only if relevant):
  - Architecture/design decisions
  - Non-obvious technical choices

  Authors and coauthors:
    - {author_name} <{author_email}>
  ```

  EXAMPLES - Notice how WHY leads:

  Problem-focused feature:
  ```
  FEAT: Enable secure user sessions to prevent unauthorized access

  Implement authentication system to protect sensitive user data

  * Why this change was made:
  - Users reported security concerns about unprotected endpoints
  - Compliance requirements mandate authenticated access
  - Current system vulnerable to session hijacking

  * What changed to achieve this:
  - Added JWT-based authentication with token validation
  - Integrated OAuth2 flow for social login providers
  - Protected routes with authentication middleware

  Authors and coauthors:
    - {author_name} <{author_email}>
  ```

  Performance-focused fix:
  ```
  FIX: Eliminate memory leak to prevent application crashes

  Resolve WebSocket connection buildup causing production outages

  * Why this change was made:
  - Production servers crashing due to memory exhaustion
  - Users experiencing frequent disconnections
  - Memory usage growing unbounded during high traffic

  * What changed to achieve this:
  - Fixed WebSocket cleanup to properly close abandoned connections
  - Added connection pooling with automatic timeout handling

  Authors and coauthors:
    - {author_name} <{author_email}>
  ```

  Maintainability-focused refactor:
  ```
  REFACTOR: Improve code maintainability for faster feature development

  Extract validation logic to reduce duplication and testing complexity

  * Why this change was made:
  - Team spending too much time debugging validation issues
  - Duplicate validation logic causing inconsistent behavior
  - New features blocked by complex validation integration

  * What changed to achieve this:
  - Consolidated user validation into dedicated service
  - Standardized validation error handling across modules

  Authors and coauthors:
    - {author_name} <{author_email}>
  ```

  Git diff (for technical context only):
  {diff}